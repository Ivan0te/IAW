{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Implantaci\u00f3n de Aplicaciones Web","text":""},{"location":"#ies-jaume-ii-el-just","title":"IES Jaume II El Just","text":""},{"location":"#curso-20242025","title":"Curso 2024/2025","text":"<p>Alumno: - Ivan Monterde Mart\u00ednez - ivanmonterdemartinez@gmail.com </p>"},{"location":"#objetivos-del-modulo","title":"Objetivos del m\u00f3dulo","text":"<p>Objetivos</p> <p>La administraci\u00f3n de aplicaciones Web incluye aspectos como:</p> <ul> <li>Instalaci\u00f3n y configuraci\u00f3n del sistema operativo y los servicios sobre los que se ejecutan las aplicaciones.</li> <li>Implantaci\u00f3n de sistemas gestores de contenidos y su adaptaci\u00f3n a las condiciones de explotaci\u00f3n.</li> <li>Administraci\u00f3n de sistemas gestores de contenidos, utilizando m\u00e9todos para optimizar su funcionamiento y asegurar el acceso a la informaci\u00f3n.</li> <li>Instalaci\u00f3n e integraci\u00f3n de aplicaciones de ofim\u00e1tica Web.</li> <li>La creaci\u00f3n de documentos Web utilizando lenguajes de \u00abscript\u00bb de servidor para acceder a la informaci\u00f3n almacenada en bases de datos.</li> <li>Modificaci\u00f3n de las funcionalidades ofrecidas por los gestores de contenidos para su adaptaci\u00f3n a los requerimientos de explotaci\u00f3n.</li> </ul>"},{"location":"#contenidos","title":"Contenidos","text":"<p>Los contenidos del m\u00f3dulo se estructuran en las siguientes unidades did\u00e1cticas:</p> <ul> <li>Unidad 1: Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web. Ver<ul> <li>Introducci\u00f3n</li> <li>Git y Github</li> <li>Markdown y MkDocs.</li> </ul> </li> <li>Unidad 2: Implantaci\u00f3n de aplicaciones web PHP<ul> <li>Implantaci\u00f3n web en un servidor LAMP</li> <li>Arquitectura de un nivel</li> <li>Arquitectura de dos niveles</li> <li>Protocolo HTTP/HTTPS</li> <li>Implantaci\u00f3n web en un servidor LEMP</li> <li>Balanceadores de carga con NGINX</li> <li>Instancias ECS en AWS</li> </ul> </li> <li>Unidad 3: Docker para la implantaci\u00f3n WEB<ul> <li>Aplicaciones web con Docker</li> <li>Despliegue de aplicaciones web en arquitectura de dos niveles con Docker y Docker Compose</li> </ul> </li> <li>Unidad 4: Fundamentos de programaci\u00f3n en PHP<ul> <li>El lenguaje de programaci\u00f3n PHP</li> <li>Sint\u00e1xis, variables, estructuras y funciones</li> <li>Acceso y manipulaci\u00f3n de bases de datos con PHP</li> </ul> </li> <li>Unidad 5: Instalaci\u00f3n y modificaci\u00f3n de gestores de contenidos<ul> <li>Instalar y configurar un CMS</li> <li>Modificar la apariencia de un CMS</li> <li>Creaci\u00f3n de Plugins personalizados para un CMS.</li> </ul> </li> </ul>"},{"location":"Unidad_1/practica_1/","title":"Pr\u00e1ctica 1: Git. Trabajando con ramas y uniones","text":"<p>Objetivos</p> <p>En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos:</p> <ul> <li>Aprender\u00e1s el concepto de rama.</li> <li>La gesti\u00f3n y el ciclo de vida (creaci\u00f3n, modificaci\u00f3n, borrado, \u2026) de ramas.</li> <li>Aprender\u00e1s el concepto de uni\u00f3n (merge) que nos posibilita la fusi\u00f3n de ramas.</li> <li>A solucionar los posibles conflictos que pueden aparecer en el momento del merge.</li> </ul>"},{"location":"Unidad_1/practica_1/#practica-a-entregar","title":"Practica a entregar","text":"<ol> <li> <p>Crea una rama que se llame primera en tu local, y ejecuta la instrucci\u00f3n necesaria para comprobar que se ha creado.</p> <p>Creaci\u00f3n de la rama: <code>git checkout -b primera</code></p> <p>Comprobaci\u00f3n: <code>git branch</code></p> </li> <li> <p>Crea un nuevo fichero en esta rama y fusi\u00f3nalo con la principal. \u00bfSe ha producido conflicto? Razona la respuesta</p> <p>Cambiar de rama: <code>git checkout primera</code></p> <p>Creaci\u00f3n del fichero: <code>touch [nombre del fichero]</code></p> <p>No se crea ningun compflicto, por que el fichero no existe en la rama principal.</p> </li> <li> <p>Borra la rama primera.</p> <p>Borrado de la rama: <code>git branch -d primera</code></p> </li> <li> <p>Crea una rama que se llame segunda, y modifica un fichero en ella para producir un conflicto al unirlo a la rama principal. Entrega el contenido del fichero donde se ha producido el conflicto.</p> <p>Creaci\u00f3n de la rama: <code>git checkout -b segunda</code> </p> <p>Cambiar de rama: <code>git checkout segunda</code></p> <p>Creaci\u00f3n del fichero: <code>touch [nombre del fichero]</code></p> <p>Fusionar ramas: <code>git merge segunda</code></p> <p>Comprovaci\u00f3n del conflicto: <code>git diff</code></p> </li> </ol>"},{"location":"Unidad_1/practica_2/","title":"Pr\u00e1ctica 2: \u00bfC\u00f3mo colaborar en un proyecto de software libre? \u00bfQu\u00e9 es un Pull Request (PR)?","text":"<p>Objetivos</p> <p>En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos:</p> <ul> <li>Conocer el concepto de Pull Request.</li> <li>Conocer la metodolog\u00eda para colaborar en proyectos alojados en GitHub realizando Pull Requests.</li> </ul>"},{"location":"Unidad_1/practica_2/#practica-a-entregar","title":"Practica a entregar","text":"<ol> <li> <p>Documentaci\u00f3n de los pasos fundamentales (con instrucciones) para realizar el pull request.</p> </li> <li> <p>Lo primero es hacer un fork del repositorio al que quieres contribuir.</p> <p></p> </li> <li> <p>Nos creara un nuevo repositorio en la cuenta de el usuario.</p> <p></p> </li> <li> <p>Una vez que hemos copiado el repositorio a nuestra cuenta, podemos clonar ese repositorio. Comando para realizar la clonaci\u00f3n: </p> <p><code>git clone git@github.com:Ivan0te/practica-pr-asix.git</code></p> </li> <li> <p>A continuaci\u00f3n vamos a crear una nueva rama, donde realizaremos los cambios que posteriormente propondremos como cambios. Para crear la rama ejecutamos:     <code>git checkout -b ram</code> </p> </li> </ol>"},{"location":"Unidad_1/practica_3/","title":"Pr\u00e1ctica 3 - Despliegue de una p\u00e1gina web est\u00e1tica con Mkdocs y GitHub Pages","text":"<p>Objetivos</p> <p>En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos:</p> <ul> <li>Aprender a utilizar MarkDown</li> <li>Aprender a utilizar MkDocs</li> <li>Aprender a utilizar GitHub Pages</li> <li>Desplegar una p\u00e1gina web est\u00e1tica</li> </ul>"},{"location":"Unidad_1/practica_3/#practica-a-entregar","title":"Practica a entregar","text":"<ol> <li> <p>Crea un nuevo proyecto de MkDocs en tu ordenador.</p> <ul> <li>Primero, aseg\u00farate de tener MkDocs instalado en tu ordenador. Si no lo tienes, puedes instalarlo con pip: <pre><code>pip install mkdocs\n</code></pre></li> <li>Luego, crea un nuevo proyecto de MkDocs usando el siguiente comando: <pre><code>mkdocs new web\n</code></pre> <pre><code>cd web\n</code></pre></li> </ul> <p>Esto crear\u00e1 una carpeta con el nombre del proyecto y generar\u00e1 una estructura b\u00e1sica con el archivo mkdocs.yml (para la configuraci\u00f3n) y una carpeta docs que contendr\u00e1 los archivos Markdown para la documentaci\u00f3n.</p> </li> <li> <p>Escribe la documentaci\u00f3n de tu proyecto en formato Markdown.</p> <p>La documentacion de el projecto esta ja echa en la practica 1 y la practica 2</p> </li> <li> <p>Genera la p\u00e1gina web con MkDocs.</p> <p><code>mkdocs new nombre-del-proyecto</code></p> </li> <li> <p>Crea un repositorio en GitHub para tu proyecto.</p> </li> <li> <p>Sube la p\u00e1gina web a GitHub Pages.</p> <p>Para subir la pagina web a GitHub Pages: <pre><code>mkdocs gh-deploy\n</code></pre> En nuestro GitHub nos creara una rama que se llamara gh-pages. </p> <p>De seguido, tendremos que ir a settings y a GitHub Pages y comprobamos que la URL que nos proporciona, funciona. </p> <p>Mi Pagina De GitHub.</p> </li> </ol>"},{"location":"Unidad_2/practica_1/","title":"Implantaci\u00f3n de una web est\u00e1tica con Apache","text":"<p>Objetivos de la pr\u00e1ctica</p> <ul> <li>Instalar y configurar un servidor web Apache2.</li> <li>Crear distintos Host Virtuales en apache2 que nos permiten tener sitios web diferenciados.</li> <li>Acceder a cada Host Virtual con un determinado nombre de dominio.</li> </ul>"},{"location":"Unidad_2/practica_1/#instalacion-de-apache2","title":"Instalaci\u00f3n de Apache2","text":"<p>Para empezar, tendremos que empezar a realiar la instalacion de Apache2. Para ello, pondremos los siguientes comandos:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install apache2 -y\n</code></pre>"},{"location":"Unidad_2/practica_1/#habilitar-modulo-de-host-virtuales","title":"Habilitar m\u00f3dulo de host virtuales","text":"<p>Para habilitar esta caracteristica, pondremos el siguiente comando en la terminal:</p> <pre><code>sudo a2enmod vhost_alias\n</code></pre> <p>Generalmente, esto viene ya habilitado por defecto.</p>"},{"location":"Unidad_2/practica_1/#configurar-host-virtuales","title":"Configurar Host Virtuales","text":"<p>Crearemos un directorio para cada sitio web: iaw2425.com y docu-iaw2425.com.</p> <pre><code>sudo mkdir -p /var/www/iaw2425.com/index.html\nsudo mkdir -p /var/www/docu-iaw2425.com/index.html\n</code></pre> <p>Asignaremos permisos.</p> <pre><code>sudo chown -R $USER:$USER /var/www/iaw2425.com\nsudo chown -R $USER:$USER /var/www/docu-iaw2425.com\n</code></pre> <p>Crear archivos configuraci\u00f3n para hosts virtuales.</p> <ul> <li> <p>Para iaw2425.com:</p> <pre><code>sudo nano /etc/apache2/sites-available/iaw2425.com.conf\n</code></pre> <p>A\u00f1adiremos el siguiente contenido:</p> <pre><code>&lt;VirtualHost *:80&gt;\nServerAdmin admin@iaw2425.com\nServerName iaw2425.com\nServerAlias www.iaw2425.com\nDocumentRoot /var/www/iaw2425.com/site/\n\n&lt;Directory /var/www/iaw2425.com/site&gt;\n    AllowOverride All\n&lt;/Directory&gt;\n\n ErrorLog ${APACHE_LOG_DIR}/iaw2425_error.log\nCustomLog ${APACHE_LOG_DIR}/iaw2425_access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> </li> <li> <p>Para docu-iaw2425.com:</p> <pre><code>sudo nano /etc/apache2/sites-available/docu-iaw2425.com.conf\n</code></pre> <p>A\u00f1adiremos el siguiente contenido:</p> <pre><code>&lt;VirtualHost *:80&gt;\nServerAdmin admin@docu-iaw2425.com\nServerName docu-iaw2425.com\nServerAlias www.docu-iaw2425.com\nRedirect / http://docu-iaw2425.com:8081/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:8081&gt;\nServerAdmin admin@docu-iaw2425.com\nServerName docu-iaw2425.com\nServerAlias www.docu-iaw2425.com\nDocumentRoot /var/www/docu-iaw2425.com/site/ \n\n&lt;Directory /var/www/docu-iaw2425.com/site&gt;\n    AllowOverride All\n&lt;/Directory&gt;\n\nErrorLog ${APACHE_LOG_DIR}/docu-iaw2425_error.log\nCustomLog ${APACHE_LOG_DIR}/docu-iaw2425_access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> </li> </ul>"},{"location":"Unidad_2/practica_1/#habilitar-los-host-virtuales","title":"Habilitar los Host Virtuales","text":"<pre><code>sudo a2ensite iaw2425.com.conf\nsudo a2ensite docu-iaw2425.com.conf\n</code></pre>"},{"location":"Unidad_2/practica_1/#configurar-archivo-etcportsconf","title":"Configurar archivo /etc/ports.conf","text":"<p>Editaremos el siguiente fichero:</p> <pre><code>sudo nano /etc/apache2/ports.conf\n</code></pre> <p>Y nos aseguraremos de que contengan estas lineas, si no las tiene, las agregaremos:</p> <pre><code>Listen 80\nListen 8081\n</code></pre>"},{"location":"Unidad_2/practica_1/#reiniciaremos-apache","title":"Reiniciaremos Apache","text":"<p>Reiniciaremos el servidor apache con el siguiente comando:</p> <pre><code>sudo systemctl restart apache2\n</code></pre>"},{"location":"Unidad_2/practica_1/#configuracion-de-hosts","title":"Configuracion de hosts","text":"<p>Para poder acceder a los sitios con los nombres de dominios, tendremos que editar el siguiente fichero:</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>Y a\u00f1adiremos las siguientes lineas:</p> <pre><code>127.0.0.1   iaw2425.com\n127.0.0.1   www.iaw2425.com\n127.0.0.1   docu-iaw2425.com\n127.0.0.1   www.docu-iaw2425.com\n</code></pre>"},{"location":"Unidad_2/practica_1/#verificacion-de-paginas","title":"Verificaci\u00f3n de paginas","text":"<p>IAW2425.COM</p> <p></p> <p>DOCU-IAW2425.COM</p> <p></p>"},{"location":"Unidad_2/practica_2/","title":"Apache Certificado SSL/TLS","text":"<p>Objetivos de la pr\u00e1ctica</p> <ul> <li>Crear un certificado SSL/TLS autofirmado con la herramienta openssl.</li> <li>Configurar el servidor web Apache para que utilice el certificado SSL/TLS autofirmado.</li> </ul>"},{"location":"Unidad_2/practica_2/#1-crear-un-certificado-ssltls-autofirmado-con-la-herramienta-openssl","title":"1. Crear un certificado SSL/TLS autofirmado con la herramienta openssl","text":"<p>Para crear un certificado SSL/TLS autofirmado, se utilizar\u00e1 la herramienta openssl. Para instalar la herramienta, se puede utilizar el siguiente comando:</p> <pre><code>sudo apt install openssl\n</code></pre> <p>Una vez instalada la herramienta, se puede utilizar para generar un certificado SSL/TLS autofirmado con el siguiente comando:</p> <pre><code>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout key.pem -out cert.pem\n</code></pre> <p>Este comando genera un certificado SSL/TLS autofirmado con una duraci\u00f3n de 365 d\u00edas. El certificado se generar\u00e1 en el archivo cert.pem y la clave privada se generar\u00e1 en el archivo key.pem.</p>"},{"location":"Unidad_2/practica_2/#12-como-automatizar-la-creacion-de-un-certificado-autofirmado","title":"1.2 C\u00f3mo automatizar la creacion de un certificado autofirmado","text":"<p><pre><code>#!/bin/bash\nset -x\n\n# Configuramos las variables con los datos que necesita el certificado\nOPENSSL_COUNTRY=\"ES\"\nOPENSSL_PROVINCE=\"Valencia\"\nOPENSSL_LOCALITY=\"CULLERA\"\nOPENSSL_ORGANIZATION=\"MI CASA\"\nOPENSSL_ORGUNIT=\"PEPITO PEPINILLO\"\nOPENSSL_COMMON_NAME=\"ivan0te.com\"\nOPENSSL_EMAIL=\"ivanmonterdemartinez@gmail.com\"\n\n# Creamos el certificado autofirmado\n\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\"\n</code></pre> Descargar</p>"},{"location":"Unidad_2/practica_2/#13-configuracion-de-un-virtualhost-con-ssltsl-en-el-servidor-web-apache","title":"1.3 Configuraci\u00f3n de un VirtualHost con SSL/TSL en el servidor web Apache.","text":""},{"location":"Unidad_2/practica_2/#paso-1","title":"Paso 1.","text":"<p>Editamos el archivo de configuraci\u00f3n del virtual host donde queremos habilitar el tr\u00e1fico HTTPS.</p> <p>En nuestro caso, utilizaremos el archivo de configuraci\u00f3n que tiene Apache por defecto para SSL/TLS, que est\u00e1 en la ruta:/etc/apache2/sites-available/default-ssl.conf.</p> <p>El contenido del archivo ser\u00e1 el siguiente:</p> <pre><code>&lt;VirtualHost *:443&gt;\n    #ServerName practica-https.local\n    DocumentRoot/var/www/html\n    DirectoryIndex index.php index.html\n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n    SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"Unidad_2/practica_2/#paso-2","title":"Paso 2.","text":"<p>Habilitamos el virtual host que acabamos de configurar.</p> <pre><code>sudo a2ensite autossl.conf\n</code></pre>"},{"location":"Unidad_2/practica_2/#paso-3","title":"Paso 3.","text":"<p>Habilitamos el modulo SSL en Apache.</p> <pre><code>sudo a2enmod ssl\n</code></pre>"},{"location":"Unidad_2/practica_2/#paso-4","title":"Paso 4.","text":"<p>Configuramos el virtual host de HTTP para que redirija todo el tr\u00e1fico a HTTPS.</p> <p>En nuestro caso, el virtual host que maneja las peticiones HTTP est\u00e1 en el archivo de configuraci\u00f3n que utiliza</p> <p>Apache por defecto para el puerto 80 :/etc/apache2/sites-available/000-default.conf.</p> <p>El contenido del archivo ser\u00e1 el siguiente:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName ivan0te.com\n    DocumentRoot/var/www/html\n    #Redirige alpuerto 443 (HTTPS)\n    RewriteEngineOn\n    RewriteCond%{HTTPS} off\n    RewriteRule^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"Unidad_2/practica_2/#paso-5","title":"Paso 5.","text":"<p>Para que el servidor web Apache pueda hacer la redirecci\u00f3n de HTTP a HTTPS es necesario habilitar el m\u00f3dulo rewrite en Apache.</p> <pre><code>sudo a2enmod rewrite\n</code></pre>"},{"location":"Unidad_2/practica_2/#paso-6","title":"Paso 6.","text":"<p>Reiniciamos el servicio de Apache.</p> <pre><code>sudo systemctl restart apache2\n</code></pre>"},{"location":"Unidad_2/practica_2/#paso-7","title":"Paso 7.","text":"<p>Una vez llegado a este punto, es necesario comprobar que el puerto 443 est\u00e1 abierto en las reglas del firewall para permitir el tr\u00e1fico HTTPS.</p>"},{"location":"Unidad_2/practica_2/#paso-8","title":"Paso 8.","text":"<p>Accede desde un navegador web al nombre de dominio que acabas de configurar. En nuestro caso ser\u00e1: https://ivan0te.com</p>"},{"location":"Unidad_2/practica_3/","title":"Practica 03: Instalar, configurar y securizar phpMyAdmin","text":""},{"location":"Unidad_2/practica_3/#instalar-phpmyadmin","title":"Instalar phpMyAdmin","text":"<ol> <li> <p>Para instalar phpMyAdmin, vamos a utilizar el paquete de instalaci\u00f3n de Debian/Ubuntu: <pre><code>sudo apt install phpmyadmin\n</code></pre></p> </li> <li> <p>Instalaremos las dependencias necesarias para phpMyAdmin: <pre><code>sudo apt install php-mbstring php-xml php-zip php-gd php-curl php-json\n</code></pre></p> </li> <li> <p>Ahora, vamos a crear un usuario para phpMyAdmin: <pre><code>sudo mysql -u root -p\n</code></pre></p> </li> <li> <p>Crearemos un usuario para phpMyAdmin: <pre><code>CREATE USER 'php'@'localhost' IDENTIFIED BY 'root';\nGRANT ALL PRIVILEGES ON *.* TO 'php'@'localhost' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n</code></pre></p> </li> <li> <p>Habilitamos la extensi\u00f3n mbstring y reiniciamos el servicio de Apache: <pre><code>sudo phpenmod mbstring\nsudo systemctl restart apache2\n</code></pre></p> </li> </ol> <p></p> <ol> <li>Automatizaci\u00f3n de la instalaci\u00f3n de LAMP</li> </ol> <pre><code># Instalar PHP\nsudo apt update -y \nsudo apt install php libapache2-mod-php -y\n\n# Paquetes Opcionales\nsudo apt install php-cli -y\nsudo apt install php-cgi -y\nsudo apt install php-mysql -y\nsudo apt install php-pgsql -y\n\n# Instalar phpmyadmin\nsudo apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl -y    \n\n# Acceder a MySQL para modificar configuraci\u00f3n\nsudo mysql -e 'UNINSTALL COMPONENT \"file://component_validate_password\";'\n\n# Crear un nuevo usuario en MySQL con todos los privilegios\nsudo mysql -e \"CREATE USER 'php'@'localhost' IDENTIFIED BY 'root';\"\nsudo mysql -e \"GRANT ALL PRIVILEGES ON *.* TO 'php'@'localhost' WITH GRANT OPTION;\"\nsudo mysql -e \"FLUSH PRIVILEGES;\"\n\n# Reiniciar servidor Apache\nsudo systemctl restart apache2\n</code></pre> <p>Descargar</p>"},{"location":"Unidad_2/practica_3/#configuracion-de-mysql","title":"Configuraci\u00f3n de MYSQL","text":"<ol> <li> <p>Configuraci\u00f3n del Acceso por Contrase\u00f1a para la Cuenta Root de MySQL</p> <ol> <li>Cambia el m\u00e9todo de autenticaci\u00f3n del usuario root de MySQL.</li> </ol> <pre><code>sudo mysql -u root -p\nALTER USER 'root'@'localhost' IDENTIFIED WITH 'caching_sha2_password' BY 'Root_pass1';\nFLUSH PRIVILEGES;\n</code></pre> <ol> <li>Verifica los m\u00e9todos de autenticaci\u00f3n empleados por cada uno de tus usuarios.</li> </ol> <pre><code>SELECT user,authentication_string,plugin,host FROM mysql.user;\n</code></pre> </li> </ol> <p></p> <ol> <li> <p>Configuraci\u00f3n de la Contrase\u00f1a de la Cuenta de Usuario de MySQL</p> <ol> <li>Crea una nueva cuenta de usuario con el nombre de usuario 'ivan' y la contrase\u00f1a 'ivanphp'.</li> <li>Darle al nuevo usuario todos los privilegios de la cuenta root.</li> </ol> <pre><code>CREATE USER 'ivan'@'localhost' IDENTIFIED BY 'ivanphp';\nGRANT ALL PRIVILEGES ON *.* TO 'ivan'@'localhost' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n</code></pre> <p></p> </li> </ol>"},{"location":"Unidad_2/practica_3/#asegurar-phpmyadmin","title":"Asegurar PhpMyAdmin","text":"<ol> <li> <p>Habilitar sobrescritura de archivos .htaccess en el configuraci\u00f3n de Apache y agregamos AllowOverride All en la secci\u00f3n Directory del archivo de configuraci\u00f3n de Apache.</p> <pre><code>sudo nano /etc/apache2/conf-available/phpmyadmin.conf\n</code></pre> <p></p> <p>Reiniciamos el servicio de Apache.</p> <pre><code>sudo systemctl restart apache2\n</code></pre> </li> <li> <p>Crea un archivo .htaccess en el directorio de phpMyAdmin.</p> <pre><code>sudo nano /usr/share/phpmyadmin/.htaccess\n</code></pre> <p>Dentro de dicho archivo, agregamos las siguientes l\u00edneas de c\u00f3digo: <pre><code>AuthType Basic\nAuthName \"Restricted Files\"\nAuthUserFile /etc/phpmyadmin/.htpasswd\nRequire valid-user\n</code></pre></p> </li> <li> <p>Crea un archivo .htpasswd para almacenar las credenciales de usuario y contrase\u00f1a.</p> <pre><code> sudo htpasswd -c /etc/phpmyadmin/.htpasswd ivanphp\n</code></pre> <p></p> </li> <li> <p>Reiniciamos el servicio de Apache.</p> </li> </ol> <pre><code>sudo systemctl restart apache2\n</code></pre> <p></p>"},{"location":"Unidad_2/practica_4/","title":"PHP Pr\u00e1ctica 4: Instalar y configurar WordPress","text":""},{"location":"Unidad_2/practica_4/#1-descripcion-general","title":"1. Descripci\u00f3n general","text":"<p>Objetivos</p> <ul> <li>Instalar PHP y Apache</li> <li>Instalar WordPress</li> <li>Configurar Apache para WordPress</li> <li>Configurar la base de datos</li> <li>Implantar una aplicaci\u00f3n web con WordPress en una arquitectura de 2 niveles</li> </ul>"},{"location":"Unidad_2/practica_4/#2-instalar-dependencias","title":"2. Instalar dependencias","text":"<p>Para poder instalar PHP y Apache, tendremos que instalar algunas dependencias. Para ello, ejecutaremos el siguiente comando:</p> <pre><code>sudo apt update\nsudo apt install apache2 ghostscript libapache2-mod-php mysql-server php php-bcmath php-curl php-imagick php-intl php-json php-mbstring php-mysql php-xml php-zip -y\n</code></pre>"},{"location":"Unidad_2/practica_4/#3-instalar-wordpress","title":"3. Instalar WordPress","text":"<p>Una vez instaladas las dependencias, podemos instalar WordPress. Para ello, ejecutaremos el siguiente comando:</p> <pre><code>sudo mkdir -p /srv/www\nsudo chown www-data: /srv/www\ncurl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www\n</code></pre>"},{"location":"Unidad_2/practica_4/#4-configurar-apache-para-wordpress","title":"4. Configurar Apache para WordPress","text":"<p>Ahora, vamos a configurar Apache para que pueda servir WordPress.  Crearemos un archivo de configuraci\u00f3n para WordPress en el directorio /etc/apache2/sites-available/wordpress.conf con el siguiente contenido:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    DocumentRoot /srv/www/wordpress\n    &lt;Directory /srv/www/wordpress&gt;\n        Options FollowSymLinks\n        AllowOverride Limit Options FileInfo\n        DirectoryIndex index.php\n        Require all granted\n    &lt;/Directory&gt;\n    &lt;Directory /srv/www/wordpress/wp-content&gt;\n        Options FollowSymLinks\n        Require all granted\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre> <p></p> <p>Acto seguido, habilitaremos el sitio con el siguiente comando:</p> <pre><code>sudo a2ensite wordpress\n</code></pre> <p>Habilitamos la reescritura de URLs con el siguiente comando:</p> <pre><code>sudo a2enmod rewrite\n</code></pre> <p>Y Deshabilitamos el sitio predeterminado con el siguiente comando:</p> <pre><code>sudo a2dissite 000-default.conf\n</code></pre> <p>Reiniciaremos el servicio de Apache con el siguiente comando:</p> <pre><code>sudo systemctl restart apache2\n</code></pre>"},{"location":"Unidad_2/practica_4/#5-configurar-la-base-de-datos","title":"5. Configurar la base de datos","text":"<p>Una vez arrancado el segundo servidor, este dedicado a la base de datos, inicia sesi\u00f3n en MySQL con:</p> <pre><code>mysql -u root -p\n</code></pre> <p>Crearemos una base de datos llamada wordpress:</p> <pre><code>CREATE DATABASE wordpress;\n</code></pre> <p></p> <p>Crearemos un usuario llamado wordpress:</p> <pre><code>CREATE USER 'wordpress'@'%' IDENTIFIED BY 'wordpress';\nGRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER\n    ON wordpress.*\n    TO wordpress@%;\nFLUSH PRIVILEGES;\n</code></pre> <p></p> <p>Habilita MySQL con:</p> <pre><code>sudo service mysql start\n</code></pre>"},{"location":"Unidad_2/practica_4/#6-configurar-wordpress-para-conectarse-a-la-base-de-datos","title":"6. Configurar WordPress para conectarse a la base de datos","text":"<p>Ahora, configuremos WordPress para usar esta base de datos. Primero, copia el archivo de configuraci\u00f3n de muestra a wp-config.php:</p> <pre><code>sudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php\n</code></pre> <p>Luego, establece las credenciales de la base de datos en el archivo de configuraci\u00f3n (no reemplaces database_name_here o username_here en los comandos a continuaci\u00f3n. Reemplaza  con tu contrase\u00f1a de base de datos.): <pre><code>sudo -u www-data sed -i 's/database_name_here/wordpress/' /srv/www/wordpress/wp-config.php\nsudo -u www-data sed -i 's/username_here/wordpress/' /srv/www/wordpress/wp-config.php\nsudo -u www-data sed -i 's/password_here/&lt;tu-contrase\u00f1a&gt;/' /srv/www/wordpress/wp-config.php\n</code></pre> <p></p> <p>Finalmente, en una sesi\u00f3n de terminal abre el archivo de configuraci\u00f3n en nano:</p> <p><pre><code>sudo -u www-data nano /srv/www/wordpress/wp-config.php\n</code></pre> Encuentra lo siguiente:</p> <pre><code>define( 'AUTH_KEY',         'pon tu frase \u00fanica aqu\u00ed' );\ndefine( 'SECURE_AUTH_KEY',  'pon tu frase \u00fanica aqu\u00ed' );\ndefine( 'LOGGED_IN_KEY',    'pon tu frase \u00fanica aqu\u00ed' );\ndefine( 'NONCE_KEY',        'pon tu frase \u00fanica aqu\u00ed' );\ndefine( 'AUTH_SALT',        'pon tu frase \u00fanica aqu\u00ed' );\ndefine( 'SECURE_AUTH_SALT', 'pon tu frase \u00fanica aqu\u00ed' );\ndefine( 'LOGGED_IN_SALT',   'pon tu frase \u00fanica aqu\u00ed' );\ndefine( 'NONCE_SALT',       'pon tu frase \u00fanica aqu\u00ed' );\n</code></pre> <p>Elimina esas l\u00edneas (ctrl+k eliminar\u00e1 una l\u00ednea cada vez que presiones la secuencia). Luego reempl\u00e1zalas con el contenido de https://api.wordpress.org/secret-key/1.1/salt/. (Esta direcci\u00f3n es un randomizador que devuelve claves completamente aleatorias cada vez que se abre.) Este paso es importante para asegurar que tu sitio no sea vulnerable a ataques de \u201csecretos conocidos\u201d.</p> <p>Guarda y cierra el archivo de configuraci\u00f3n escribiendo ctrl+x seguido de y y luego enter.</p> <p></p>"},{"location":"Unidad_2/practica_4/#7-configurar-wordpress","title":"7. Configurar WordPress","text":"<p>Abre http://localhost/ en tu navegador. Se te pedir\u00e1 el t\u00edtulo de tu nuevo sitio, nombre de usuario, contrase\u00f1a y direcci\u00f3n de correo electr\u00f3nico. Ten en cuenta que el nombre de usuario y la contrase\u00f1a que elijas aqu\u00ed son para WordPress, y no proporcionan acceso a ninguna otra parte de tu servidor: elige un nombre de usuario y una contrase\u00f1a que sean diferentes de tus credenciales de MySQL (base de datos), que configuramos para el uso de WordPress, y diferentes de tus credenciales para iniciar sesi\u00f3n en tu computadora o en el escritorio o shell de tu servidor. Puedes elegir si deseas que tu sitio sea indexado por los motores de b\u00fasqueda.</p>"},{"location":"Unidad_2/practica_4/#instalacion-de-wordpress","title":"Instalaci\u00f3n de WordPress","text":"<p>Ahora puedes iniciar sesi\u00f3n en http://localhost/wp-login.php. En el Panel de WordPress, ver\u00e1s un mont\u00f3n de \u00edconos y opciones. \u00a1Explora un poco! Puedes cambiar el tema, instalar plugins, escribir publicaciones y p\u00e1ginas, y mucho m\u00e1s.</p> <p></p>"},{"location":"Unidad_2/practica_4/#8-escribe-tu-primera-publicacion","title":"8. Escribe tu primera publicaci\u00f3n","text":"<p>Notar\u00e1s la publicaci\u00f3n \u201c\u00a1Hola mundo!\u201d. Vamos a eliminarla y escribir algo m\u00e1s interesante\u2026 Todas las publicaciones</p> <p>Desde el Panel de control (http://localhost/wp-admin/), selecciona el \u00edcono \u201cPublicaciones\u201d y haz clic en \u201cTodas las publicaciones\u201d. Pasa el rat\u00f3n sobre el t\u00edtulo de la publicaci\u00f3n \u201c\u00a1Hola mundo!\u201d y selecciona Papelera.</p> <p></p>"},{"location":"Unidad_2/practica_5/","title":"PHP Pr\u00e1ctica 5: Balanceo de Carga con Apache","text":"<p>Requisitos previos</p> <ul> <li>Tres servidores ejecutando un sistema operativo Ubuntu.</li> <li>Un usuario root o un usuario con privilegios sudo.</li> <li>Usaremos los siguientes dominios: <ul> <li>web1.iaw2425.com</li> <li>web2.iaw2425.com</li> <li>balancer.iaw2425.com</li> </ul> </li> </ul>"},{"location":"Unidad_2/practica_5/#ejemplo-de-configuracion-del-balanceador-de-carga","title":"Ejemplo de configuraci\u00f3n del Balanceador de Carga","text":""},{"location":"Unidad_2/practica_5/#actualizar-paquetes-del-sistema","title":"Actualizar Paquetes del Sistema","text":"<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Unidad_2/practica_5/#instalar-apache","title":"Instalar Apache","text":"<pre><code>sudo apt install apache2\n</code></pre>"},{"location":"Unidad_2/practica_5/#configurar-el-primer-servidor-backend-apache","title":"Configurar el Primer Servidor Backend Apache","text":"<p>Crearemos una pagina HTML de muestra y un archivo de configuraci\u00f3n del host virtual en el primer servidor Apache.</p> <pre><code>nano /var/www/html/web1.html\n</code></pre> <p>Agregaremos el siguiente contenido:</p> <pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;title&gt;Servidor Web Apache 1&lt;/title&gt;\n&lt;h2&gt;\u00a1Esta es la p\u00e1gina del Servidor Web Apache 1!&lt;/h2&gt;\n&lt;/html&gt;\n</code></pre> <p>Guardamos y cerramos el archivo con Ctrl+O y Ctrl+X.</p> <p>Ahora, creamos el arhcivo de configuraci\u00f3n del host virtual en el primer servidor Apache.</p> <pre><code>nano /etc/apache2/sites-enabled/web1.conf\n</code></pre> <p>Agregaremos el siguiente contenido:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName web1.iaw2425.com\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/html\n    DirectoryIndex web1.html\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <p>Guardamos y cerramos el archivo con Ctrl+O y Ctrl+X.</p> <p>Ahora, reiniciamos el servicio Apache.</p> <pre><code>sudo systemctl restart apache2\n</code></pre> <p>Para comprobar que todo funciona correctamente, vamos a acceder a la URL web1.iaw2425.com.</p> <p></p>"},{"location":"Unidad_2/practica_5/#configurar-el-segundo-servidor-backend-apache","title":"Configurar el Segundo Servidor Backend Apache","text":"<p>Crearemos una pagina HTML de muestra y un archivo de configuraci\u00f3n del host virtual en el segundo servidor Apache.</p> <pre><code>nano /var/www/html/web2.html\n</code></pre> <p>Agregaremos el siguiente contenido:</p> <pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;title&gt;Servidor Web Apache 2&lt;/title&gt;\n&lt;h2&gt;\u00a1Esta es la p\u00e1gina del Servidor Web Apache 2!&lt;/h2&gt;\n&lt;/html&gt;\n</code></pre> <p>Guardamos y cerramos el archivo con Ctrl+O y Ctrl+X.</p> <p>Ahora, creamos el arhcivo de configuraci\u00f3n del host virtual en el segundo servidor Apache.</p> <pre><code>nano /etc/apache2/sites-enabled/web2.conf\n</code></pre> <p>Agregaremos el siguiente contenido:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName web2.iaw2425.com\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/html\n    DirectoryIndex web2.html\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <p>Guardamos y cerramos el archivo con Ctrl+O y Ctrl+X.</p> <p>Ahora, reiniciamos el servicio Apache.</p> <pre><code>sudo systemctl restart apache2\n</code></pre> <p>Para comprobar que todo funciona correctamente, vamos a acceder a la URL web2.iaw2425.com.</p> <p></p>"},{"location":"Unidad_2/practica_5/#configurar-el-balanceador-de-carga","title":"Configurar el Balanceador de Carga","text":"<p>Configuraremos el tercer servidor como un servidor de balanceo de carga para redirigir todo el tr\u00e1fico a los servidores web.</p> <p>Tendremos que habilitar los m\u00f3dulos proxy en el servidor de balanceo de carga:</p> <pre><code>a2enmod proxy\na2enmod proxy_http\na2enmod proxy_balancer\na2enmod lbmethod_byrequests\n</code></pre> <p>M\u00f3dulos de Apache</p> <ul> <li>proxy: Permite el uso de proxys en Apache.</li> <li>proxy_http: Permite el uso de proxys en Apache.</li> <li>proxy_balancer: Permite el uso de balanceadores de carga en Apache.</li> <li>lbmethod_byrequests: Permite el uso de m\u00e9todos de balanceo de carga en Apache.</li> </ul> <p>Reiniciamos el servicio Apache.</p> <pre><code>sudo systemctl restart apache2\n</code></pre> <p>Verificamos todos los m\u00f3dulos de Apache.</p> <pre><code>apachectl -M | grep proxy\n</code></pre> <p></p> <p>Creamos el archivo de configuraci\u00f3n del balanceador de carga.</p> <pre><code>nano /etc/apache2/sites-enabled/balancer.conf\n</code></pre> <p>Agregaremos el siguiente contenido:</p> <p>```bash     ServerName balancer.iaw2425.com              # servidor 1         BalancerMember http://web1.iaw2425.com         #BalancerMember http://IP_HTTP_SERVER_1:80 <pre><code>    #servidor 2\n    BalancerMember http://web2.iaw2425.com\n    #BalancerMember http://IP_HTTP_SERVER_1:80\n\n    ProxySet stickysession=ROUTEID\n&lt;/Proxy&gt;\nProxyPreserveHost On\nProxyPass / balancer://webserver/\nProxyPassReverse / balancer://webserver/\n</code></pre> <p> <code>Guardamos y cerramos el archivo con Ctrl+O y Ctrl+X.  Ahora, reiniciamos el servicio Apache.</code>bash sudo systemctl restart apache2 ```</p> <p>Para comprobar que todo funciona correctamente, vamos a acceder a la URL balancer.iaw2425.com.</p> <p></p>"},{"location":"Unidad_2/practica_5/#configuracion-de-la-politica-de-balanceo-de-carga","title":"Configuraci\u00f3n de la Pol\u00edtica de Balanceo de Carga","text":"<p>Para configurar la pol\u00edtica de balanceo de carga es necesario tener activado previamente el m\u00f3dulo proxy_balancer en el servidor de balanceo de carga.</p> <pre><code>sudo a2enmod proxy_balancer\n</code></pre> <p>Creamos el archivo de configuraci\u00f3n de la pol\u00edtica de balanceo de carga.</p> <p>El balanceo de carga que voy a utilizar es el Round Robin.</p> <p>Para poder activar este m\u00e9todo de balanceo tenemos que activar el m\u00f3dulo lbmethod_byrequests.</p> <pre><code>sudo a2enmod lbmethod_byrequests\n</code></pre> <p>Este m\u00e9todo de balanceo tambi\u00e9n permite distribuir las peticiones entre los servidores en funci\u00f3n de los par\u00e1metros lbfactor y lbstatus.</p> <p>Ahora reiniciamos el servicio Apache.</p> <pre><code>sudo systemctl restart apache2\n</code></pre>"},{"location":"Unidad_2/practica_5/#verificar-el-balanceo-de-carga-con-apache","title":"Verificar el Balanceo de Carga con Apache","text":""}]}